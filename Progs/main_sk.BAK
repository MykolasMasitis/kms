#INCLUDE INCLUDE\MAIN.H

# DEFINE PV_LPU 0
# DEFINE PV_SMO 1
# DEFINE PV_SVD 2

PUBLIC IsCheckInterval
m.IsCheckInterval = .F. && Не проверять интервал ВС

PUBLIC ARRAY VsInt(1,2)
VsInt=0

PUSH KEY
CLEAR
CLEAR PROGRAM
CLOSE ALL

ON KEY LABEL ALT+F4 DO ALTF4

#IF DEBUGMODE
	SET RESOURCE ON
#ELSE
	SET RESOURCE OFF
	CLOSE DEBUGGER
	SET VIEW OFF
#ENDIF

DECLARE INTEGER GetPrivateProfileString IN Win32API  AS GetPrivStr ;
	STRING cSection, STRING cKey, STRING cDefault, STRING @cBuffer, ;
	INTEGER nBufferSize, STRING cINIFile
DECLARE INTEGER WritePrivateProfileString IN Win32API AS WritePrivStr ;
	STRING cSection, STRING cKey, STRING cValue, STRING cINIFile
DECLARE INTEGER GetSysColor IN User32.DLL INTEGER
DECLARE INTEGER ShellExecute IN shell32.dll ;
	INTEGER hndWin, STRING cAction, STRING cFileName, ;
	STRING cParams, STRING cDir, INTEGER nShowWin

&& Объявления функций библиотеки FreeImage.dll
DECLARE Long _FreeImage_Initialise@4 IN FreeImage.dll as FIInit
DECLARE Long _FreeImage_DeInitialise@0 IN FreeImage.dll as FIRelease
DECLARE Long _FreeImage_Allocate@24 IN FreeImage.dll as FIAllocateBitmap ;
 long Width, long Height, long BitsPerPixel, Long RedMask, Long GreenMask, Long BlueMask
DECLARE Long _FreeImage_Save@16 IN FreeImage.dll as FISaveBitmap2File;
 Long Format, Long BitMap, String FileName, Long Flags
DECLARE Long _FreeImage_Invert@4 IN FreeImage.dll as FIInvertBitmap;
 Long Bitmap
DECLARE Long _FreeImage_ConvertTo8Bits@4 IN FreeImage.dll as FIConvertTo8Bits ;
 long BitMap
DECLARE Long _FreeImage_Load@12 IN FreeImage.dll as FIImageLoad ;
 Long Format, String FileName, Long Flags 
DECLARE Long _FreeImage_Rescale@16 IN FreeImage.dll as FIImageRescale ;
 long Bitmap, Long Width, Long Height, Long Filter
DECLARE Long _FreeImage_Unload@4 IN FreeImage.dll as FIImageUnload ;
 Long Bitmap

&& Объявления функций библиотеки FreeImage.dll

PUBLIC oApp
PUBLIC gcOldDir, gcOldPath, gcOldClassLib, gcOldEscape, gcOldTalk
PUBLIC User, kol_pv, IsExit, gdCurDat1, gdCurdat2, gnTipPolis, gnZayavka, gnZayavkaS
PUBLIC paisoms, parc, pbase, pbin, pcommon, pout, plocal, pexpimp, pmail, ptempl, pmfc
PUBLIC pExp1, pExp2, pExp3, pExp4, pExp5, pExp6, pExp7, pExp8, pExp9, pExp10 ,;
       minFam, maxFam, minIm, maxIm, minOt, maxOt && Параметры экспертизы
PUBLIC glIsNeedOutSSearch, glIsNeedStop1Search, glIsNeedStop2Search, gnLastLR, gcRegim
PUBLIC qcod, qcodid,qname, qaddress, dir_dolgn, dir_fio, buh_dolgn, buh_fio, spec_dolgn, spec_fio, ;
 mcod, tip_pv
PUBLIC IsSprIm, TipForm, OpFio
PUBLIC userlogin, userfam, userim, userot, ucod
PUBLIC q_ogrn, q_okato, gdip as Object, usbdevs as Object , usbdev as Object, tablet as Object,;
 ProtocolHelper as Object 

m.userfam   = ''
m.userim    = ''
m.userot    = ''
m.ucod      = 0

m.opfio     = ''

PUBLIC codcom
m.codcom = ''

PUBLIC fso AS SCRIPTING.FileSystemObject, wshell AS Shell.Application
fso    = CREATEOBJECT('Scripting.FileSystemObject')
wshell = CREATEOBJECT('Shell.Application')

#DEFINE NEW_FORM_TYPE 1
#DEFINE OLD_FORM_TYPE 2

TipForm = NEW_FORM_TYPE && 1 - новая форма, 2 - старая форма

PUBLIC ARRAY mes_text[12], mes_main[12]
mes_text[1]="января"
mes_text[2]="февраля"
mes_text[3]="марта"
mes_text[4]="апреля"
mes_text[5]="мая"
mes_text[6]="июня"
mes_text[7]="июля"
mes_text[8]="августа"
mes_text[9]="сентября"
mes_text[10]="октября"
mes_text[11]="ноября"
mes_text[12]="декабря"

mes_main[1]="Январь" && Было rmon
mes_main[2]="Февраль"
mes_main[3]="Март"
mes_main[4]="Апрель"
mes_main[5]="Май"
mes_main[6]="Июнь"
mes_main[7]="Июль"
mes_main[8]="Август"
mes_main[9]="Сентябрь"
mes_main[10]="Октябрь"
mes_main[11]="Ноябрь"
mes_main[12]="Декабрь"

m.glIsNeedOutSSearch  = .t.
m.glIsNeedStop1Search = .t.
m.glIsNeedStop2Search = .t.
*qcod = 'P2'
m.gnTipPolis = 1 && Постоянные полисы

PUBLIC dyear(20,1)
dyear(1,1)  = "1997"
dyear(2,1)  = "1998"
dyear(3,1)  = "1999"
dyear(4,1)  = "2000"
dyear(5,1)  = "2001"
dyear(6,1)  = "2002"
dyear(7,1)  = "2003"
dyear(8,1)  = "2004"
dyear(9,1)  = "2005"
dyear(10,1) = "2006"
dyear(11,1) = "2007"
dyear(12,1) = "2008"
dyear(13,1) = "2009"
dyear(14,1) = "2010"
dyear(15,1) = "2011"
dyear(16,1) = "2012"
dyear(17,1) = "2013"
dyear(18,1) = "2014"
dyear(19,1) = "2015"
dyear(20,1) = "2016"

m.gcCurYear   = STR(YEAR(DATE()))
m.gdCurDat1   = CTOD('01.'+STR(MONTH(DATE()),2)+'.'+STR(YEAR(DATE()),4))
m.gdCurdat2   = GOMONTH(m.gdCurDat1,1)-1
user          = 'USR010'

IF SET('TALK') = 'ON'
	SET TALK OFF
	gcOldTalk = 'ON'
ELSE
	gcOldTalk = 'OFF'
ENDIF

gcOldEscape     = SET('ESCAPE')
gcOldDir        = FULLPATH(CURDIR())
gcOldPath       = SET('PATH')
gcOldClassLib   = SET('CLASSLIB')
plOldFlagEnd    = .T.
plOldFirstStart = .T.

_TOOLTIPTIMEOUT = 0
_INCSEEK = 5
_dblclick = 1.5

LOCAL i, lcSys16
PUBLIC lcProgram

IF TYPE("_VFP.Projects.Count") = "N"
	FOR m.i = 1 TO _VFP.Projects.Count
		IF TYPE("_VFP.Projects(m.i)") = "O"
			_VFP.Projects(m.i).Close()
		ENDIF
	ENDFOR
ENDIF

_screen.Visible = .t.
_SCREEN.Picture = 'kms.jpg'

m.lcSys16 = SYS(16)
m.lcProgram = SUBSTR(m.lcSys16, AT(":", m.lcSys16) - 1)
CD LEFT(m.lcProgram, RAT("\", m.lcProgram))
*-- Если стартовали из START.PRG, то переходим в головную директорию
IF (RIGHT(m.lcProgram, 3) == "FXP") OR (RIGHT(m.lcProgram, 3) == "PRG")
	CD ..
ENDIF

SET DEFAULT TO (SYS(5)+SYS(2003) + '\')

SET PATH TO FORMS, CLASSES, REPORTS, PROGS, BITMAPS
SET CLASSLIB TO MYCLASS,MYCONTROLS
SET PROCEDURE TO Utils, Util, LibOOo

TRY 
 gdip=NEWOBJECT('gdipluswrapper','gdipluswrapper.vcx')
CATCH 
 MESSAGEBOX('КЛАСС GdiPlusWrapper НЕ НАЙДЕН!',0+16,'GdiPlusWrapper.vcx')
ENDTRY 

oApp = NEWOBJECT("MAINCLASS", "CLASSES\MYCLASS.VCX")
IF !ISNULL(oApp) AND TYPE("oApp") = "O"
 SET SYSMENU TO
 SET SYSMENU ON
 SET MESSAGE TO oApp.cMainWindCaption
 SET STATUS BAR ON 
 _Screen.Width      = 1024
 _Screen.Height     = 768-100
* _SCREEN.WindowState = 2
 _Screen.BackColor  = RGB(192,192,192)
 _Screen.Icon = 'cross.ico'
 _Screen.AutoCenter = .f.
 
 IF oApp.CfgBase() = -1
  =ExitProg()
 ENDIF 
 
 IF fso.FileExists(pcommon+'\status.dbf')
  IF OpenFile(pcommon+'\status', 'status', 'shar', 'code')>0
   IF USED('status')
    USE IN status 
   ENDIF 
  ELSE 
   IF SEEK(5, 'status')
    IF USED('status')
     USE IN status 
    ENDIF 
   ELSE 
    IF USED('status')
     USE IN status 
    ENDIF 
    IF OpenFile(pcommon+'\status', 'status', 'excl', 'code')>0
     IF USED('status')
      USE IN status 
     ENDIF 
    ELSE 
     SELECT status 
     IF SEEK(4, 'status')
      REPLACE name WITH 'Полис на изготовлении'
      INSERT INTO status (code,name,used) VALUES (5, 'Полис получен', .t.)
     ELSE 
      INSERT INTO status (code,name,used) VALUES (5, 'Полис получен', .t.)
      IF USED('status')
       USE IN status 
      ENDIF 
     ENDIF 
    ENDIF 
   ENDIF 
  ENDIF 
 ENDIF 

 SET LIBRARY TO vfpcompression.fll ADDITIVE 

 IF VARTYPE(gdip)!='O'
  MESSAGEBOX('КЛАСС GdiPlusWrapper НЕ НАЙДЕН!',0+16,'GdiPlusWrapper.vcx')
 ENDIF 

 IF oApp.pvBase() = -1
  =ExitProg()
 ENDIF 

 IF OpenFile(pbin+'\pvp2', 'pvp2', 'shar')>0
  IF USED('pvp2')
   USE IN pvp2
  ENDIF 
  =ExitProg()
 ENDIF 

  PUBLIC pvid(RECCOUNT('pvp2'), 10)
  COUNT FOR v != .f. TO kol_pv
  COPY FOR v != .f. FIELD codpv, name_pv, mcod, lpu_id, tip_pv TO ARRAY pvid
  m.mcod = pvid(1,3)
  m.tip_pv = pvid(1,5)
  USE 
  pnResult = 0
  pnResult = OpenFile("&PBin\smo", "smo", "excl")
  IF pnResult > 0
   =ExitProg()
  ELSE 
   SELECT smo 
   REINDEX 
   COUNT FOR v=.t. TO lnIsV
   DO CASE 
    CASE lnIsV <= 0
	 MESSAGEBOX("Не выбрана ни одна Компания!"+CHR(13)+"Продолжение работы невозможно!",0+16,"Стоп!")
     =ExitProg()
    CASE lnIsV == 1 && Все ОК
     LOCATE FOR v = .t.
     SCATTER FIELDS EXCEPT v, code, name, mcod MEMVAR 
     m.qcod = code
     m.qname = name
     m.qaddress = address
     m.mcod = IIF(EMPTY(m.mcod), mcod, m.mcod)
     USE 
    CASE lnIsV > 0
	 MESSAGEBOX("Выбрано более одной Компании!"+CHR(13)+"Продолжение работы невозможно!",0+16,"Стоп!")
     =ExitProg()
   ENDCASE 
  ENDIF
  
  m.q_okato='45000'
  DO CASE 
   CASE m.qcod = 'R4'
    m.q_ogrn = '1025004642519'
    m.qcodid = 3415
   CASE m.qcod = 'P2'
    m.q_ogrn = '1025002690877'
    m.qcodid = 3386
   CASE m.qcod = 'P3'
    m.q_ogrn = '1026103708729'
    m.qcodid = 5387
   CASE m.qcod = 'S6'
    m.q_ogrn = '1026300524931'
    m.qcodid = 5404
   OTHERWISE
  ENDCASE 

_screen.Closable=.f.

 DO CASE 
  CASE kol_pv==0
   _SCREEN.Caption = 'НЕ ВЫБРАН НИ ОДНИ ПУНКТ!'
  CASE kol_pv==1
   _SCREEN.Caption = ALLTRIM(UPPER(pvid(1,2)))
  OTHERWISE 
   _SCREEN.Caption = 'МУЛЬТИРЕЖИМ: '
 ENDCASE 
 
 IF kol_pv>1
  FOR i=1 TO kol_pv
   _SCREEN.Caption = _SCREEN.Caption + pvid(i,1) + IIF(i!=kol_pv, ',', '')
  ENDFOR 
  _SCREEN.Caption = _SCREEN.Caption + ')'
 ENDIF 
		
 oApp.ChkBase()
* oApp.ChkBase2()
 
* IF oApp.IsRestart() = -1
*  MESSAGEBOX('Приложение уже запущено. Повторный запуск невозможен!',0+16,'')
*  =ExitProg()
* ENDIF 

 IF kol_pv==1
  m.llResponse = .F.
  ppath = pbase+'\'+pvid(1,1)
  DO FORM Login TO m.llResponse
 ELSE 
  m.llResponse = .T.
 ENDIF 
 IF !m.llResponse
 =ExitProg()
 ENDIF 
 
 IF !FILE(pcommon+'\users.dbf')
  CREATE TABLE &pcommon\users ;
   (pv c(3), ucod i, id c(8), fam c(25), im c(20), ot c(20), kadr n(1))
  INDEX ON pv+PADL(ucod,3,'0') TAG vir
  USE 
 ENDIF 

* MESSAGEBOX(m.userlogin,0+64,'')

 cKbLayOut(0x419)
 
 DO menu_sk
 
 READ EVENT
ENDIF
=ExitProg()

FUNCTION ExitProg
 RELEASE m.oError, m && ???
 #IF DEBUGMODE
  _SCREEN.Caption = oApp.cOldWindCaption
  SET SYSMENU TO DEFAULT
  _SCREEN.TitleBar = 1
  _SCREEN.WindowState = 2
  _SCREEN.LockScreen = .F.
  _SCREEN.Picture = ''
  _SCREEN.BackColor = RGB(255,255,255)
  oApp.ShowToolBars()
  SET SYSMENU ON
 #ELSE
 _SCREEN.Caption = ""
 #ENDIF
 oApp.CloseAllTable()
 RELEASE m.oApp
 RELEASE m.gdip
 #IF !DEBUGMODE
  ON SHUTDOWN
  QUIT
 #ELSE
  ON SHUTDOWN
  _SCREEN.Icon =""
  _SCREEN.FirstStart = .T.
  *SET HELP TO
  CLEAR ALL
  CLOSE ALL
  CLEAR PROGRAM
  SET SYSMENU NOSAVE
  SET SYSMENU TO DEFAULT
  SET SYSMENU ON
 #ENDIF
RETURN 

